# This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/broker/data.bif (alternative mode).

export {

##! Functions for inspecting and manipulating broker data.



module Broker;


## Enumerates the possible types that :zeek:see:`Broker::Data` may be in
## terms of Zeek data types.
type DataType: enum  {
	NONE,
	BOOL,
	INT,
	COUNT,
	DOUBLE,
	STRING,
	ADDR,
	SUBNET,
	PORT,
	TIME,
	INTERVAL,
	ENUM,
	SET,
	TABLE,
	VECTOR,
} ;






global Broker::__data: function(d: any ): Broker::Data ;


global Broker::__data_type: function(d: Broker::Data ): Broker::DataType ;



global Broker::__opaque_clone_through_serialization: function(d: any ): any ;


global Broker::__set_create: function(): Broker::Data ;


global Broker::__set_clear: function(s: Broker::Data ): bool ;


global Broker::__set_size: function(s: Broker::Data ): count ;


global Broker::__set_contains: function(s: Broker::Data , key: any ): bool ;


global Broker::__set_insert: function(s: Broker::Data , key: any ): bool ;


global Broker::__set_remove: function(s: Broker::Data , key: any ): bool ;


global Broker::__set_iterator: function(s: Broker::Data ): opaque of Broker::SetIterator ;


global Broker::__set_iterator_last: function(it: opaque of Broker::SetIterator ): bool ;


global Broker::__set_iterator_next: function(it: opaque of Broker::SetIterator ): bool ;


global Broker::__set_iterator_value: function(it: opaque of Broker::SetIterator ): Broker::Data ;


global Broker::__table_create: function(): Broker::Data ;


global Broker::__table_clear: function(t: Broker::Data ): bool ;


global Broker::__table_size: function(t: Broker::Data ): count ;


global Broker::__table_contains: function(t: Broker::Data , key: any ): bool ;


global Broker::__table_insert: function(t: Broker::Data , key: any , val: any ): Broker::Data ;


global Broker::__table_remove: function(t: Broker::Data , key: any ): Broker::Data ;


global Broker::__table_lookup: function(t: Broker::Data , key: any ): Broker::Data ;


global Broker::__table_iterator: function(t: Broker::Data ): opaque of Broker::TableIterator ;


global Broker::__table_iterator_last: function(it: opaque of Broker::TableIterator ): bool ;


global Broker::__table_iterator_next: function(it: opaque of Broker::TableIterator ): bool ;


global Broker::__table_iterator_value: function(it: opaque of Broker::TableIterator ): Broker::TableItem ;


global Broker::__vector_create: function(): Broker::Data ;


global Broker::__vector_clear: function(v: Broker::Data ): bool ;


global Broker::__vector_size: function(v: Broker::Data ): count ;


global Broker::__vector_insert: function(v: Broker::Data , idx: count , d: any ): bool ;


global Broker::__vector_replace: function(v: Broker::Data , idx: count , d: any ): Broker::Data ;


global Broker::__vector_remove: function(v: Broker::Data , idx: count ): Broker::Data ;


global Broker::__vector_lookup: function(v: Broker::Data , idx: count ): Broker::Data ;


global Broker::__vector_iterator: function(v: Broker::Data ): opaque of Broker::VectorIterator ;


global Broker::__vector_iterator_last: function(it: opaque of Broker::VectorIterator ): bool ;


global Broker::__vector_iterator_next: function(it: opaque of Broker::VectorIterator ): bool ;


global Broker::__vector_iterator_value: function(it: opaque of Broker::VectorIterator ): Broker::Data ;


global Broker::__record_create: function(sz: count ): Broker::Data ;


global Broker::__record_size: function(r: Broker::Data ): count ;


global Broker::__record_assign: function(r: Broker::Data , idx: count , d: any ): bool ;


global Broker::__record_lookup: function(r: Broker::Data , idx: count ): Broker::Data ;


global Broker::__record_iterator: function(r: Broker::Data ): opaque of Broker::RecordIterator ;


global Broker::__record_iterator_last: function(it: opaque of Broker::RecordIterator ): bool ;


global Broker::__record_iterator_next: function(it: opaque of Broker::RecordIterator ): bool ;


global Broker::__record_iterator_value: function(it: opaque of Broker::RecordIterator ): Broker::Data ;

} # end of export section
module GLOBAL;
