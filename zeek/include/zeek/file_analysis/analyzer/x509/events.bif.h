// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/file_analysis/analyzer/x509/events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_file_analysis_analyzer_x509_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_file_analysis_analyzer_x509_events_bif
#define _usr_src_packages_BUILD_build_src_file_analysis_analyzer_x509_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr x509_certificate; 
namespace zeek { namespace BifEvent {  void enqueue_x509_certificate(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::Val> cert_ref, zeek::IntrusivePtr<zeek::Val> cert);  }  }
extern zeek::EventHandlerPtr x509_extension; 
namespace zeek { namespace BifEvent {  void enqueue_x509_extension(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::Val> ext);  }  }
extern zeek::EventHandlerPtr x509_ext_basic_constraints; 
namespace zeek { namespace BifEvent {  void enqueue_x509_ext_basic_constraints(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::Val> ext);  }  }
extern zeek::EventHandlerPtr x509_ext_subject_alternative_name; 
namespace zeek { namespace BifEvent {  void enqueue_x509_ext_subject_alternative_name(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::Val> ext);  }  }
extern zeek::EventHandlerPtr x509_ocsp_ext_signed_certificate_timestamp; 
namespace zeek { namespace BifEvent {  void enqueue_x509_ocsp_ext_signed_certificate_timestamp(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek_uint_t version, zeek::IntrusivePtr<zeek::StringVal> logid, zeek_uint_t timestamp, zeek_uint_t hash_algorithm, zeek_uint_t signature_algorithm, zeek::IntrusivePtr<zeek::StringVal> signature);  }  }

#endif
