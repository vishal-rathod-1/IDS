// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/file_analysis/analyzer/x509/ocsp_events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_file_analysis_analyzer_x509_ocsp_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_file_analysis_analyzer_x509_ocsp_events_bif
#define _usr_src_packages_BUILD_build_src_file_analysis_analyzer_x509_ocsp_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr ocsp_request; 
namespace zeek { namespace BifEvent {  void enqueue_ocsp_request(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek_uint_t version);  }  }
extern zeek::EventHandlerPtr ocsp_request_certificate; 
namespace zeek { namespace BifEvent {  void enqueue_ocsp_request_certificate(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::StringVal> hashAlgorithm, zeek::IntrusivePtr<zeek::StringVal> issuerNameHash, zeek::IntrusivePtr<zeek::StringVal> issuerKeyHash, zeek::IntrusivePtr<zeek::StringVal> serialNumber);  }  }
extern zeek::EventHandlerPtr ocsp_response_status; 
namespace zeek { namespace BifEvent {  void enqueue_ocsp_response_status(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::StringVal> status);  }  }
extern zeek::EventHandlerPtr ocsp_response_bytes; 
namespace zeek { namespace BifEvent {  void enqueue_ocsp_response_bytes(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::StringVal> status, zeek_uint_t version, zeek::IntrusivePtr<zeek::StringVal> responderId, double producedAt, zeek::IntrusivePtr<zeek::StringVal> signatureAlgorithm, zeek::IntrusivePtr<zeek::Val> certs);  }  }
extern zeek::EventHandlerPtr ocsp_response_certificate; 
namespace zeek { namespace BifEvent {  void enqueue_ocsp_response_certificate(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::StringVal> hashAlgorithm, zeek::IntrusivePtr<zeek::StringVal> issuerNameHash, zeek::IntrusivePtr<zeek::StringVal> issuerKeyHash, zeek::IntrusivePtr<zeek::StringVal> serialNumber, zeek::IntrusivePtr<zeek::StringVal> certStatus, double revokeTime, zeek::IntrusivePtr<zeek::StringVal> revokeReason, double thisUpdate, double nextUpdate);  }  }
extern zeek::EventHandlerPtr ocsp_extension; 
namespace zeek { namespace BifEvent {  void enqueue_ocsp_extension(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::Val> ext, int global_resp);  }  }

#endif
