// This file was automatically generated by bifcl from /usr/src/packages/BUILD/auxil/zeek-af_packet-plugin/src/af_packet.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_builtin_plugins_zeek_af_packet_plugin_af_packet_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_builtin_plugins_zeek_af_packet_plugin_af_packet_bif
#define _usr_src_packages_BUILD_build_src_builtin_plugins_zeek_af_packet_plugin_af_packet_bif
#include "zeek/zeek-bif.h"
#endif
#endif

namespace BifEnum { namespace AF_Packet { enum FanoutMode {
	FANOUT_HASH,
	FANOUT_CPU,
	FANOUT_QM,
	FANOUT_CBPF,
	FANOUT_EBPF,
}; } }
namespace zeek { namespace BifType { namespace Enum{ namespace AF_Packet {  extern zeek::IntrusivePtr<zeek::EnumType> FanoutMode;  } } }}
namespace BifEnum { namespace AF_Packet { enum ChecksumMode {
	CHECKSUM_OFF,
	CHECKSUM_ON,
	CHECKSUM_KERNEL,
}; } }
namespace zeek { namespace BifType { namespace Enum{ namespace AF_Packet {  extern zeek::IntrusivePtr<zeek::EnumType> ChecksumMode;  } } }}
namespace zeek { namespace BifConst { namespace AF_Packet {  extern zeek_uint_t buffer_size;  }  } }
namespace zeek { namespace BifConst { namespace AF_Packet {  extern zeek_uint_t block_size;  }  } }
namespace zeek { namespace BifConst { namespace AF_Packet {  extern double block_timeout;  }  } }
namespace zeek { namespace BifConst { namespace AF_Packet {  extern int enable_hw_timestamping;  }  } }
namespace zeek { namespace BifConst { namespace AF_Packet {  extern int enable_defrag;  }  } }
namespace zeek { namespace BifConst { namespace AF_Packet {  extern int enable_fanout;  }  } }
namespace zeek { namespace BifConst { namespace AF_Packet {  extern zeek::IntrusivePtr<zeek::Val> fanout_mode;  }  } }
namespace zeek { namespace BifConst { namespace AF_Packet {  extern zeek_uint_t fanout_id;  }  } }
namespace zeek { namespace BifConst { namespace AF_Packet {  extern zeek_uint_t link_type;  }  } }
namespace zeek { namespace BifConst { namespace AF_Packet {  extern zeek::IntrusivePtr<zeek::Val> checksum_validation_mode;  }  } }

#endif
