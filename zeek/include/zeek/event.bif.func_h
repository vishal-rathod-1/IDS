// This file was automatically generated by bifcl from event.bif.

namespace zeek { namespace BifEvent {  void enqueue_zeek_init(zeek::analyzer::Analyzer* analyzer);  }  }
namespace zeek { namespace BifEvent {  void enqueue_zeek_done(zeek::analyzer::Analyzer* analyzer);  }  }
namespace zeek { namespace BifEvent {  void enqueue_net_done(zeek::analyzer::Analyzer* analyzer, double t);  }  }
namespace zeek { namespace BifEvent {  void enqueue_network_time_init(zeek::analyzer::Analyzer* analyzer);  }  }
namespace zeek { namespace BifEvent {  void enqueue_new_connection(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
namespace zeek { namespace BifEvent {  void enqueue_tunnel_changed(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> e);  }  }
namespace zeek { namespace BifEvent {  void enqueue_connection_timeout(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
namespace zeek { namespace BifEvent {  void enqueue_connection_state_remove(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
namespace zeek { namespace BifEvent {  void enqueue_connection_reused(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
namespace zeek { namespace BifEvent {  void enqueue_connection_status_update(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
namespace zeek { namespace BifEvent {  void enqueue_connection_flipped(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
namespace zeek { namespace BifEvent {  void enqueue_connection_flow_label_changed(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t old_label, zeek_uint_t new_label);  }  }
namespace zeek { namespace BifEvent {  void enqueue_udp_session_done(zeek::analyzer::Analyzer* analyzer, zeek::Connection* u);  }  }
namespace zeek { namespace BifEvent {  void enqueue_scheduled_analyzer_applied(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> a);  }  }
namespace zeek { namespace BifEvent {  void enqueue_raw_packet(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> p);  }  }
namespace zeek { namespace BifEvent {  void enqueue_new_packet(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> p);  }  }
namespace zeek { namespace BifEvent {  void enqueue_ipv6_ext_headers(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> p);  }  }
namespace zeek { namespace BifEvent {  void enqueue_esp_packet(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> p);  }  }
namespace zeek { namespace BifEvent {  void enqueue_mobile_ipv6_message(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> p);  }  }
namespace zeek { namespace BifEvent {  void enqueue_packet_contents(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> contents);  }  }
namespace zeek { namespace BifEvent {  void enqueue_rexmit_inconsistency(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> t1, zeek::IntrusivePtr<zeek::StringVal> t2, zeek::IntrusivePtr<zeek::StringVal> tcp_flags);  }  }
namespace zeek { namespace BifEvent {  void enqueue_content_gap(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t seq, zeek_uint_t length);  }  }
namespace zeek { namespace BifEvent {  void enqueue_analyzer_confirmation_info(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> atype, zeek::IntrusivePtr<zeek::Val> info);  }  }
namespace zeek { namespace BifEvent {  void enqueue_analyzer_violation_info(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> atype, zeek::IntrusivePtr<zeek::Val> info);  }  }
namespace zeek { namespace BifEvent {  void enqueue_protocol_late_match(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> atype);  }  }
namespace zeek { namespace BifEvent {  void enqueue_conn_stats(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> os, zeek::IntrusivePtr<zeek::Val> rs);  }  }
namespace zeek { namespace BifEvent {  void enqueue_conn_weird(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::StringVal> name, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> addl, zeek::IntrusivePtr<zeek::StringVal> source);  }  }
namespace zeek { namespace BifEvent {  void enqueue_expired_conn_weird(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::StringVal> name, zeek::IntrusivePtr<zeek::Val> id, zeek::IntrusivePtr<zeek::StringVal> uid, zeek::IntrusivePtr<zeek::StringVal> addl, zeek::IntrusivePtr<zeek::StringVal> source);  }  }
namespace zeek { namespace BifEvent {  void enqueue_flow_weird(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::StringVal> name, zeek::IntrusivePtr<zeek::AddrVal> src, zeek::IntrusivePtr<zeek::AddrVal> dst, zeek::IntrusivePtr<zeek::StringVal> addl, zeek::IntrusivePtr<zeek::StringVal> source);  }  }
namespace zeek { namespace BifEvent {  void enqueue_net_weird(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::StringVal> name, zeek::IntrusivePtr<zeek::StringVal> addl, zeek::IntrusivePtr<zeek::StringVal> source);  }  }
namespace zeek { namespace BifEvent {  void enqueue_file_weird(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::StringVal> name, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::StringVal> addl, zeek::IntrusivePtr<zeek::StringVal> source);  }  }
namespace zeek { namespace BifEvent {  void enqueue_signature_match(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> state, zeek::IntrusivePtr<zeek::StringVal> msg, zeek::IntrusivePtr<zeek::StringVal> data, zeek_uint_t end_of_match);  }  }
namespace zeek { namespace BifEvent {  void enqueue_profiling_update(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::FileVal> f, int expensive);  }  }
namespace zeek { namespace BifEvent {  void enqueue_reporter_info(zeek::analyzer::Analyzer* analyzer, double t, zeek::IntrusivePtr<zeek::StringVal> msg, zeek::IntrusivePtr<zeek::StringVal> location);  }  }
namespace zeek { namespace BifEvent {  void enqueue_reporter_warning(zeek::analyzer::Analyzer* analyzer, double t, zeek::IntrusivePtr<zeek::StringVal> msg, zeek::IntrusivePtr<zeek::StringVal> location);  }  }
namespace zeek { namespace BifEvent {  void enqueue_reporter_error(zeek::analyzer::Analyzer* analyzer, double t, zeek::IntrusivePtr<zeek::StringVal> msg, zeek::IntrusivePtr<zeek::StringVal> location);  }  }
namespace zeek { namespace BifEvent {  void enqueue_zeek_script_loaded(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::StringVal> path, zeek_uint_t level);  }  }
namespace zeek { namespace BifEvent {  void enqueue_file_opened(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::FileVal> f);  }  }
namespace zeek { namespace BifEvent {  void enqueue_event_queue_flush_point(zeek::analyzer::Analyzer* analyzer);  }  }
namespace zeek { namespace BifEvent {  void enqueue_get_file_handle(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> tag, zeek::Connection* c, int is_orig);  }  }
namespace zeek { namespace BifEvent {  void enqueue_file_new(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f);  }  }
namespace zeek { namespace BifEvent {  void enqueue_file_over_new_connection(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::Connection* c, int is_orig);  }  }
namespace zeek { namespace BifEvent {  void enqueue_file_sniff(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::Val> meta);  }  }
namespace zeek { namespace BifEvent {  void enqueue_file_timeout(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f);  }  }
namespace zeek { namespace BifEvent {  void enqueue_file_gap(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek_uint_t offset, zeek_uint_t len);  }  }
namespace zeek { namespace BifEvent {  void enqueue_file_reassembly_overflow(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek_uint_t offset, zeek_uint_t skipped);  }  }
namespace zeek { namespace BifEvent {  void enqueue_file_state_remove(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f);  }  }
namespace zeek { namespace BifEvent {  void enqueue_dns_mapping_valid(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> dm);  }  }
namespace zeek { namespace BifEvent {  void enqueue_dns_mapping_unverified(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> dm);  }  }
namespace zeek { namespace BifEvent {  void enqueue_dns_mapping_new_name(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> dm);  }  }
namespace zeek { namespace BifEvent {  void enqueue_dns_mapping_lost_name(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> dm);  }  }
namespace zeek { namespace BifEvent {  void enqueue_dns_mapping_name_changed(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> prev, zeek::IntrusivePtr<zeek::Val> latest);  }  }
namespace zeek { namespace BifEvent {  void enqueue_dns_mapping_altered(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> dm, zeek::IntrusivePtr<zeek::Val> old_addrs, zeek::IntrusivePtr<zeek::Val> new_addrs);  }  }
namespace zeek { namespace BifEvent {  void enqueue_new_event(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::StringVal> name, zeek::IntrusivePtr<zeek::Val> params);  }  }
namespace zeek { namespace BifEvent {  void enqueue_anonymization_mapping(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::AddrVal> orig, zeek::IntrusivePtr<zeek::AddrVal> mapped);  }  }
namespace zeek { namespace BifEvent { namespace Pcap {  void enqueue_file_done(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::StringVal> path);  }  }  }
namespace zeek { namespace BifEvent {  void enqueue_unknown_protocol(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::StringVal> analyzer_name, zeek_uint_t protocol, zeek::IntrusivePtr<zeek::StringVal> first_bytes, zeek::IntrusivePtr<zeek::Val> analyzer_history);  }  }
namespace zeek { namespace BifEvent {  void enqueue_packet_not_processed(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> pkt);  }  }
