// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/input/input.bif (alternative mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_input_input_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_input_input_bif
#define _usr_src_packages_BUILD_build_src_input_input_bif
#include "zeek/zeek-bif.h"
#endif
#endif

namespace BifEnum { namespace Input { enum Event {
	EVENT_NEW = 0,
	EVENT_CHANGED = 1,
	EVENT_REMOVED = 2,
}; } }
namespace zeek { namespace BifType { namespace Enum{ namespace Input {  extern zeek::IntrusivePtr<zeek::EnumType> Event;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace Input {  extern zeek::IntrusivePtr<zeek::RecordType> TableDescription;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace Input {  extern zeek::IntrusivePtr<zeek::RecordType> EventDescription;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace Input {  extern zeek::IntrusivePtr<zeek::RecordType> AnalysisDescription;  } } }}
namespace zeek { namespace BifFunc { namespace Input { extern zeek::ValPtr __create_table_stream_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Input { extern zeek::ValPtr __create_event_stream_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Input { extern zeek::ValPtr __create_analysis_stream_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Input { extern zeek::ValPtr __remove_stream_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Input { extern zeek::ValPtr __force_update_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifConst { namespace Input {  extern int accept_unsupported_types;  }  } }

#endif
