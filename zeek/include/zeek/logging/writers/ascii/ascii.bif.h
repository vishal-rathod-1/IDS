// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/logging/writers/ascii/ascii.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_logging_writers_ascii_ascii_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_logging_writers_ascii_ascii_bif
#define _usr_src_packages_BUILD_build_src_logging_writers_ascii_ascii_bif
#include "zeek/zeek-bif.h"
#endif
#endif

namespace zeek { namespace BifConst { namespace LogAscii {  extern int output_to_stdout;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern int include_meta;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern zeek::IntrusivePtr<zeek::StringVal> meta_prefix;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern zeek::IntrusivePtr<zeek::StringVal> separator;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern zeek::IntrusivePtr<zeek::StringVal> set_separator;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern zeek::IntrusivePtr<zeek::StringVal> empty_field;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern zeek::IntrusivePtr<zeek::StringVal> unset_field;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern int use_json;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern int enable_leftover_log_rotation;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern int enable_utf_8;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern zeek::IntrusivePtr<zeek::Val> json_timestamps;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern int json_include_unset_fields;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern zeek_uint_t gzip_level;  }  } }
namespace zeek { namespace BifConst { namespace LogAscii {  extern zeek::IntrusivePtr<zeek::StringVal> gzip_file_extension;  }  } }

#endif
