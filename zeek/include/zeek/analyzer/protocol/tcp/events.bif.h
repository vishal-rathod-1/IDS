// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/analyzer/protocol/tcp/events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_analyzer_protocol_tcp_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_analyzer_protocol_tcp_events_bif
#define _usr_src_packages_BUILD_build_src_analyzer_protocol_tcp_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr new_connection_contents; 
namespace zeek { namespace BifEvent {  void enqueue_new_connection_contents(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr connection_attempt; 
namespace zeek { namespace BifEvent {  void enqueue_connection_attempt(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr connection_established; 
namespace zeek { namespace BifEvent {  void enqueue_connection_established(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr partial_connection; 
namespace zeek { namespace BifEvent {  void enqueue_partial_connection(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr connection_partial_close; 
namespace zeek { namespace BifEvent {  void enqueue_connection_partial_close(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr connection_finished; 
namespace zeek { namespace BifEvent {  void enqueue_connection_finished(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr connection_half_finished; 
namespace zeek { namespace BifEvent {  void enqueue_connection_half_finished(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr connection_rejected; 
namespace zeek { namespace BifEvent {  void enqueue_connection_rejected(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr connection_reset; 
namespace zeek { namespace BifEvent {  void enqueue_connection_reset(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr connection_pending; 
namespace zeek { namespace BifEvent {  void enqueue_connection_pending(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr connection_SYN_packet; 
namespace zeek { namespace BifEvent {  void enqueue_connection_SYN_packet(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> pkt);  }  }
extern zeek::EventHandlerPtr connection_first_ACK; 
namespace zeek { namespace BifEvent {  void enqueue_connection_first_ACK(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr connection_EOF; 
namespace zeek { namespace BifEvent {  void enqueue_connection_EOF(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig);  }  }
extern zeek::EventHandlerPtr tcp_packet; 
namespace zeek { namespace BifEvent {  void enqueue_tcp_packet(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> flags, zeek_uint_t seq, zeek_uint_t ack, zeek_uint_t len, zeek::IntrusivePtr<zeek::StringVal> payload);  }  }
extern zeek::EventHandlerPtr tcp_option; 
namespace zeek { namespace BifEvent {  void enqueue_tcp_option(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t opt, zeek_uint_t optlen);  }  }
extern zeek::EventHandlerPtr tcp_options; 
namespace zeek { namespace BifEvent {  void enqueue_tcp_options(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::Val> options);  }  }
extern zeek::EventHandlerPtr tcp_contents; 
namespace zeek { namespace BifEvent {  void enqueue_tcp_contents(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t seq, zeek::IntrusivePtr<zeek::StringVal> contents);  }  }
extern zeek::EventHandlerPtr tcp_rexmit; 
namespace zeek { namespace BifEvent {  void enqueue_tcp_rexmit(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t seq, zeek_uint_t len, zeek_uint_t data_in_flight, zeek_uint_t window);  }  }
extern zeek::EventHandlerPtr tcp_multiple_checksum_errors; 
namespace zeek { namespace BifEvent {  void enqueue_tcp_multiple_checksum_errors(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t threshold);  }  }
extern zeek::EventHandlerPtr tcp_multiple_zero_windows; 
namespace zeek { namespace BifEvent {  void enqueue_tcp_multiple_zero_windows(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t threshold);  }  }
extern zeek::EventHandlerPtr tcp_multiple_retransmissions; 
namespace zeek { namespace BifEvent {  void enqueue_tcp_multiple_retransmissions(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t threshold);  }  }
extern zeek::EventHandlerPtr tcp_multiple_gap; 
namespace zeek { namespace BifEvent {  void enqueue_tcp_multiple_gap(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t threshold);  }  }
extern zeek::EventHandlerPtr contents_file_write_failure; 
namespace zeek { namespace BifEvent {  void enqueue_contents_file_write_failure(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> msg);  }  }

#endif
