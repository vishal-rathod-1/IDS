// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/analyzer/protocol/rpc/events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_analyzer_protocol_rpc_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_analyzer_protocol_rpc_events_bif
#define _usr_src_packages_BUILD_build_src_analyzer_protocol_rpc_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr nfs_proc_null; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_null(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info);  }  }
extern zeek::EventHandlerPtr nfs_proc_getattr; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_getattr(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::StringVal> fh, zeek::IntrusivePtr<zeek::Val> attrs);  }  }
extern zeek::EventHandlerPtr nfs_proc_sattr; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_sattr(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_lookup; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_lookup(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_read; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_read(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_readlink; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_readlink(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::StringVal> fh, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_symlink; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_symlink(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_link; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_link(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_write; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_write(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_create; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_create(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_mkdir; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_mkdir(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_remove; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_remove(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_rmdir; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_rmdir(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_rename; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_rename(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_readdir; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_readdir(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr nfs_proc_not_implemented; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_proc_not_implemented(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> proc);  }  }
extern zeek::EventHandlerPtr nfs_reply_status; 
namespace zeek { namespace BifEvent {  void enqueue_nfs_reply_status(zeek::analyzer::Analyzer* analyzer, zeek::Connection* n, zeek::IntrusivePtr<zeek::Val> info);  }  }
extern zeek::EventHandlerPtr pm_request_null; 
namespace zeek { namespace BifEvent {  void enqueue_pm_request_null(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r);  }  }
extern zeek::EventHandlerPtr pm_request_set; 
namespace zeek { namespace BifEvent {  void enqueue_pm_request_set(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek::IntrusivePtr<zeek::Val> m, int success);  }  }
extern zeek::EventHandlerPtr pm_request_unset; 
namespace zeek { namespace BifEvent {  void enqueue_pm_request_unset(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek::IntrusivePtr<zeek::Val> m, int success);  }  }
extern zeek::EventHandlerPtr pm_request_getport; 
namespace zeek { namespace BifEvent {  void enqueue_pm_request_getport(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek::IntrusivePtr<zeek::Val> pr, zeek::IntrusivePtr<zeek::PortVal> p);  }  }
extern zeek::EventHandlerPtr pm_request_dump; 
namespace zeek { namespace BifEvent {  void enqueue_pm_request_dump(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek::IntrusivePtr<zeek::Val> m);  }  }
extern zeek::EventHandlerPtr pm_request_callit; 
namespace zeek { namespace BifEvent {  void enqueue_pm_request_callit(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek::IntrusivePtr<zeek::Val> call, zeek::IntrusivePtr<zeek::PortVal> p);  }  }
extern zeek::EventHandlerPtr pm_attempt_null; 
namespace zeek { namespace BifEvent {  void enqueue_pm_attempt_null(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek::IntrusivePtr<zeek::Val> status);  }  }
extern zeek::EventHandlerPtr pm_attempt_set; 
namespace zeek { namespace BifEvent {  void enqueue_pm_attempt_set(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek::IntrusivePtr<zeek::Val> status, zeek::IntrusivePtr<zeek::Val> m);  }  }
extern zeek::EventHandlerPtr pm_attempt_unset; 
namespace zeek { namespace BifEvent {  void enqueue_pm_attempt_unset(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek::IntrusivePtr<zeek::Val> status, zeek::IntrusivePtr<zeek::Val> m);  }  }
extern zeek::EventHandlerPtr pm_attempt_getport; 
namespace zeek { namespace BifEvent {  void enqueue_pm_attempt_getport(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek::IntrusivePtr<zeek::Val> status, zeek::IntrusivePtr<zeek::Val> pr);  }  }
extern zeek::EventHandlerPtr pm_attempt_dump; 
namespace zeek { namespace BifEvent {  void enqueue_pm_attempt_dump(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek::IntrusivePtr<zeek::Val> status);  }  }
extern zeek::EventHandlerPtr pm_attempt_callit; 
namespace zeek { namespace BifEvent {  void enqueue_pm_attempt_callit(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek::IntrusivePtr<zeek::Val> status, zeek::IntrusivePtr<zeek::Val> call);  }  }
extern zeek::EventHandlerPtr pm_bad_port; 
namespace zeek { namespace BifEvent {  void enqueue_pm_bad_port(zeek::analyzer::Analyzer* analyzer, zeek::Connection* r, zeek_uint_t bad_p);  }  }
extern zeek::EventHandlerPtr rpc_dialogue; 
namespace zeek { namespace BifEvent {  void enqueue_rpc_dialogue(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t prog, zeek_uint_t ver, zeek_uint_t proc, zeek::IntrusivePtr<zeek::Val> status, double start_time, zeek_uint_t call_len, zeek_uint_t reply_len);  }  }
extern zeek::EventHandlerPtr rpc_call; 
namespace zeek { namespace BifEvent {  void enqueue_rpc_call(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t xid, zeek_uint_t prog, zeek_uint_t ver, zeek_uint_t proc, zeek_uint_t call_len);  }  }
extern zeek::EventHandlerPtr rpc_reply; 
namespace zeek { namespace BifEvent {  void enqueue_rpc_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t xid, zeek::IntrusivePtr<zeek::Val> status, zeek_uint_t reply_len);  }  }
extern zeek::EventHandlerPtr mount_proc_null; 
namespace zeek { namespace BifEvent {  void enqueue_mount_proc_null(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info);  }  }
extern zeek::EventHandlerPtr mount_proc_mnt; 
namespace zeek { namespace BifEvent {  void enqueue_mount_proc_mnt(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req, zeek::IntrusivePtr<zeek::Val> rep);  }  }
extern zeek::EventHandlerPtr mount_proc_umnt; 
namespace zeek { namespace BifEvent {  void enqueue_mount_proc_umnt(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req);  }  }
extern zeek::EventHandlerPtr mount_proc_umnt_all; 
namespace zeek { namespace BifEvent {  void enqueue_mount_proc_umnt_all(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> req);  }  }
extern zeek::EventHandlerPtr mount_proc_not_implemented; 
namespace zeek { namespace BifEvent {  void enqueue_mount_proc_not_implemented(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> proc);  }  }
extern zeek::EventHandlerPtr mount_reply_status; 
namespace zeek { namespace BifEvent {  void enqueue_mount_reply_status(zeek::analyzer::Analyzer* analyzer, zeek::Connection* n, zeek::IntrusivePtr<zeek::Val> info);  }  }

#endif
