// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/analyzer/protocol/dns/events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_analyzer_protocol_dns_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_analyzer_protocol_dns_events_bif
#define _usr_src_packages_BUILD_build_src_analyzer_protocol_dns_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr dns_message; 
namespace zeek { namespace BifEvent {  void enqueue_dns_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::Val> msg, zeek_uint_t len);  }  }
extern zeek::EventHandlerPtr dns_request; 
namespace zeek { namespace BifEvent {  void enqueue_dns_request(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::StringVal> query, zeek_uint_t qtype, zeek_uint_t qclass, zeek::IntrusivePtr<zeek::StringVal> original_query);  }  }
extern zeek::EventHandlerPtr dns_rejected; 
namespace zeek { namespace BifEvent {  void enqueue_dns_rejected(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::StringVal> query, zeek_uint_t qtype, zeek_uint_t qclass, zeek::IntrusivePtr<zeek::StringVal> original_query);  }  }
extern zeek::EventHandlerPtr dns_query_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_query_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::StringVal> query, zeek_uint_t qtype, zeek_uint_t qclass, zeek::IntrusivePtr<zeek::StringVal> original_query);  }  }
extern zeek::EventHandlerPtr dns_A_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_A_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::AddrVal> a);  }  }
extern zeek::EventHandlerPtr dns_AAAA_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_AAAA_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::AddrVal> a);  }  }
extern zeek::EventHandlerPtr dns_A6_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_A6_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::AddrVal> a);  }  }
extern zeek::EventHandlerPtr dns_NS_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_NS_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::StringVal> name);  }  }
extern zeek::EventHandlerPtr dns_CNAME_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_CNAME_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::StringVal> name);  }  }
extern zeek::EventHandlerPtr dns_PTR_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_PTR_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::StringVal> name);  }  }
extern zeek::EventHandlerPtr dns_SOA_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_SOA_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> soa);  }  }
extern zeek::EventHandlerPtr dns_WKS_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_WKS_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans);  }  }
extern zeek::EventHandlerPtr dns_HINFO_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_HINFO_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::StringVal> cpu, zeek::IntrusivePtr<zeek::StringVal> os);  }  }
extern zeek::EventHandlerPtr dns_MX_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_MX_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::StringVal> name, zeek_uint_t preference);  }  }
extern zeek::EventHandlerPtr dns_TXT_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_TXT_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> strs);  }  }
extern zeek::EventHandlerPtr dns_SPF_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_SPF_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> strs);  }  }
extern zeek::EventHandlerPtr dns_CAA_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_CAA_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek_uint_t flags, zeek::IntrusivePtr<zeek::StringVal> tag, zeek::IntrusivePtr<zeek::StringVal> value);  }  }
extern zeek::EventHandlerPtr dns_SRV_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_SRV_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::StringVal> target, zeek_uint_t priority, zeek_uint_t weight, zeek_uint_t p);  }  }
extern zeek::EventHandlerPtr dns_unknown_reply; 
namespace zeek { namespace BifEvent {  void enqueue_dns_unknown_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans);  }  }
extern zeek::EventHandlerPtr dns_EDNS_addl; 
namespace zeek { namespace BifEvent {  void enqueue_dns_EDNS_addl(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans);  }  }
extern zeek::EventHandlerPtr dns_EDNS_ecs; 
namespace zeek { namespace BifEvent {  void enqueue_dns_EDNS_ecs(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> opt);  }  }
extern zeek::EventHandlerPtr dns_EDNS_tcp_keepalive; 
namespace zeek { namespace BifEvent {  void enqueue_dns_EDNS_tcp_keepalive(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> opt);  }  }
extern zeek::EventHandlerPtr dns_EDNS_cookie; 
namespace zeek { namespace BifEvent {  void enqueue_dns_EDNS_cookie(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> opt);  }  }
extern zeek::EventHandlerPtr dns_TKEY; 
namespace zeek { namespace BifEvent {  void enqueue_dns_TKEY(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans);  }  }
extern zeek::EventHandlerPtr dns_TSIG_addl; 
namespace zeek { namespace BifEvent {  void enqueue_dns_TSIG_addl(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans);  }  }
extern zeek::EventHandlerPtr dns_RRSIG; 
namespace zeek { namespace BifEvent {  void enqueue_dns_RRSIG(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> rrsig);  }  }
extern zeek::EventHandlerPtr dns_DNSKEY; 
namespace zeek { namespace BifEvent {  void enqueue_dns_DNSKEY(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> dnskey);  }  }
extern zeek::EventHandlerPtr dns_NSEC; 
namespace zeek { namespace BifEvent {  void enqueue_dns_NSEC(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::StringVal> next_name, zeek::IntrusivePtr<zeek::Val> bitmaps);  }  }
extern zeek::EventHandlerPtr dns_NSEC3; 
namespace zeek { namespace BifEvent {  void enqueue_dns_NSEC3(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> nsec3);  }  }
extern zeek::EventHandlerPtr dns_NSEC3PARAM; 
namespace zeek { namespace BifEvent {  void enqueue_dns_NSEC3PARAM(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> nsec3param);  }  }
extern zeek::EventHandlerPtr dns_DS; 
namespace zeek { namespace BifEvent {  void enqueue_dns_DS(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> ds);  }  }
extern zeek::EventHandlerPtr dns_BINDS; 
namespace zeek { namespace BifEvent {  void enqueue_dns_BINDS(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> binds);  }  }
extern zeek::EventHandlerPtr dns_SSHFP; 
namespace zeek { namespace BifEvent {  void enqueue_dns_SSHFP(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek_uint_t algo, zeek_uint_t fptype, zeek::IntrusivePtr<zeek::StringVal> fingerprint);  }  }
extern zeek::EventHandlerPtr dns_LOC; 
namespace zeek { namespace BifEvent {  void enqueue_dns_LOC(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> loc);  }  }
extern zeek::EventHandlerPtr dns_SVCB; 
namespace zeek { namespace BifEvent {  void enqueue_dns_SVCB(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> svcb);  }  }
extern zeek::EventHandlerPtr dns_HTTPS; 
namespace zeek { namespace BifEvent {  void enqueue_dns_HTTPS(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg, zeek::IntrusivePtr<zeek::Val> ans, zeek::IntrusivePtr<zeek::Val> https);  }  }
extern zeek::EventHandlerPtr dns_end; 
namespace zeek { namespace BifEvent {  void enqueue_dns_end(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg);  }  }

#endif
