// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/analyzer/protocol/ssh/events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_analyzer_protocol_ssh_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_analyzer_protocol_ssh_events_bif
#define _usr_src_packages_BUILD_build_src_analyzer_protocol_ssh_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr ssh_server_version; 
namespace zeek { namespace BifEvent {  void enqueue_ssh_server_version(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> version);  }  }
extern zeek::EventHandlerPtr ssh_client_version; 
namespace zeek { namespace BifEvent {  void enqueue_ssh_client_version(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> version);  }  }
extern zeek::EventHandlerPtr ssh_auth_successful; 
namespace zeek { namespace BifEvent {  void enqueue_ssh_auth_successful(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int auth_method_none);  }  }
extern zeek::EventHandlerPtr ssh_auth_attempted; 
namespace zeek { namespace BifEvent {  void enqueue_ssh_auth_attempted(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int authenticated);  }  }
extern zeek::EventHandlerPtr ssh_capabilities; 
namespace zeek { namespace BifEvent {  void enqueue_ssh_capabilities(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> cookie, zeek::IntrusivePtr<zeek::Val> capabilities);  }  }
extern zeek::EventHandlerPtr ssh2_server_host_key; 
namespace zeek { namespace BifEvent {  void enqueue_ssh2_server_host_key(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> key);  }  }
extern zeek::EventHandlerPtr ssh1_server_host_key; 
namespace zeek { namespace BifEvent {  void enqueue_ssh1_server_host_key(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> modulus, zeek::IntrusivePtr<zeek::StringVal> exponent);  }  }
extern zeek::EventHandlerPtr ssh_server_host_key; 
namespace zeek { namespace BifEvent {  void enqueue_ssh_server_host_key(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> hash);  }  }
extern zeek::EventHandlerPtr ssh_encrypted_packet; 
namespace zeek { namespace BifEvent {  void enqueue_ssh_encrypted_packet(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int orig, zeek_uint_t len);  }  }
extern zeek::EventHandlerPtr ssh2_dh_server_params; 
namespace zeek { namespace BifEvent {  void enqueue_ssh2_dh_server_params(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> p, zeek::IntrusivePtr<zeek::StringVal> q);  }  }
extern zeek::EventHandlerPtr ssh2_gss_error; 
namespace zeek { namespace BifEvent {  void enqueue_ssh2_gss_error(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t major_status, zeek_uint_t minor_status, zeek::IntrusivePtr<zeek::StringVal> err_msg);  }  }
extern zeek::EventHandlerPtr ssh2_ecc_key; 
namespace zeek { namespace BifEvent {  void enqueue_ssh2_ecc_key(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> q);  }  }
extern zeek::EventHandlerPtr ssh2_ecc_init; 
namespace zeek { namespace BifEvent {  void enqueue_ssh2_ecc_init(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig);  }  }
extern zeek::EventHandlerPtr ssh2_dh_gex_init; 
namespace zeek { namespace BifEvent {  void enqueue_ssh2_dh_gex_init(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig);  }  }
extern zeek::EventHandlerPtr ssh2_gss_init; 
namespace zeek { namespace BifEvent {  void enqueue_ssh2_gss_init(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig);  }  }
extern zeek::EventHandlerPtr ssh2_rsa_secret; 
namespace zeek { namespace BifEvent {  void enqueue_ssh2_rsa_secret(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig);  }  }

#endif
