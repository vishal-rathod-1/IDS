// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/analyzer/protocol/irc/events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_analyzer_protocol_irc_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_analyzer_protocol_irc_events_bif
#define _usr_src_packages_BUILD_build_src_analyzer_protocol_irc_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr irc_request; 
namespace zeek { namespace BifEvent {  void enqueue_irc_request(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> prefix, zeek::IntrusivePtr<zeek::StringVal> command, zeek::IntrusivePtr<zeek::StringVal> arguments);  }  }
extern zeek::EventHandlerPtr irc_reply; 
namespace zeek { namespace BifEvent {  void enqueue_irc_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> prefix, zeek_uint_t code, zeek::IntrusivePtr<zeek::StringVal> params);  }  }
extern zeek::EventHandlerPtr irc_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> prefix, zeek::IntrusivePtr<zeek::StringVal> command, zeek::IntrusivePtr<zeek::StringVal> message);  }  }
extern zeek::EventHandlerPtr irc_quit_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_quit_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> nick, zeek::IntrusivePtr<zeek::StringVal> message);  }  }
extern zeek::EventHandlerPtr irc_privmsg_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_privmsg_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> source, zeek::IntrusivePtr<zeek::StringVal> target, zeek::IntrusivePtr<zeek::StringVal> message);  }  }
extern zeek::EventHandlerPtr irc_notice_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_notice_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> source, zeek::IntrusivePtr<zeek::StringVal> target, zeek::IntrusivePtr<zeek::StringVal> message);  }  }
extern zeek::EventHandlerPtr irc_squery_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_squery_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> source, zeek::IntrusivePtr<zeek::StringVal> target, zeek::IntrusivePtr<zeek::StringVal> message);  }  }
extern zeek::EventHandlerPtr irc_join_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_join_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::Val> info_list);  }  }
extern zeek::EventHandlerPtr irc_part_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_part_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> nick, zeek::IntrusivePtr<zeek::Val> chans, zeek::IntrusivePtr<zeek::StringVal> message);  }  }
extern zeek::EventHandlerPtr irc_nick_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_nick_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> who, zeek::IntrusivePtr<zeek::StringVal> newnick);  }  }
extern zeek::EventHandlerPtr irc_invalid_nick; 
namespace zeek { namespace BifEvent {  void enqueue_irc_invalid_nick(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig);  }  }
extern zeek::EventHandlerPtr irc_network_info; 
namespace zeek { namespace BifEvent {  void enqueue_irc_network_info(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t users, zeek_uint_t services, zeek_uint_t servers);  }  }
extern zeek::EventHandlerPtr irc_server_info; 
namespace zeek { namespace BifEvent {  void enqueue_irc_server_info(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t users, zeek_uint_t services, zeek_uint_t servers);  }  }
extern zeek::EventHandlerPtr irc_channel_info; 
namespace zeek { namespace BifEvent {  void enqueue_irc_channel_info(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t chans);  }  }
extern zeek::EventHandlerPtr irc_who_line; 
namespace zeek { namespace BifEvent {  void enqueue_irc_who_line(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> target_nick, zeek::IntrusivePtr<zeek::StringVal> channel, zeek::IntrusivePtr<zeek::StringVal> user, zeek::IntrusivePtr<zeek::StringVal> host, zeek::IntrusivePtr<zeek::StringVal> server, zeek::IntrusivePtr<zeek::StringVal> nick, zeek::IntrusivePtr<zeek::StringVal> params, zeek_uint_t hops, zeek::IntrusivePtr<zeek::StringVal> real_name);  }  }
extern zeek::EventHandlerPtr irc_names_info; 
namespace zeek { namespace BifEvent {  void enqueue_irc_names_info(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> c_type, zeek::IntrusivePtr<zeek::StringVal> channel, zeek::IntrusivePtr<zeek::Val> users);  }  }
extern zeek::EventHandlerPtr irc_whois_operator_line; 
namespace zeek { namespace BifEvent {  void enqueue_irc_whois_operator_line(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> nick);  }  }
extern zeek::EventHandlerPtr irc_whois_channel_line; 
namespace zeek { namespace BifEvent {  void enqueue_irc_whois_channel_line(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> nick, zeek::IntrusivePtr<zeek::Val> chans);  }  }
extern zeek::EventHandlerPtr irc_whois_user_line; 
namespace zeek { namespace BifEvent {  void enqueue_irc_whois_user_line(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> nick, zeek::IntrusivePtr<zeek::StringVal> user, zeek::IntrusivePtr<zeek::StringVal> host, zeek::IntrusivePtr<zeek::StringVal> real_name);  }  }
extern zeek::EventHandlerPtr irc_oper_response; 
namespace zeek { namespace BifEvent {  void enqueue_irc_oper_response(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, int got_oper);  }  }
extern zeek::EventHandlerPtr irc_global_users; 
namespace zeek { namespace BifEvent {  void enqueue_irc_global_users(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> prefix, zeek::IntrusivePtr<zeek::StringVal> msg);  }  }
extern zeek::EventHandlerPtr irc_channel_topic; 
namespace zeek { namespace BifEvent {  void enqueue_irc_channel_topic(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> channel, zeek::IntrusivePtr<zeek::StringVal> topic);  }  }
extern zeek::EventHandlerPtr irc_who_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_who_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> mask, int oper);  }  }
extern zeek::EventHandlerPtr irc_whois_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_whois_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> server, zeek::IntrusivePtr<zeek::StringVal> users);  }  }
extern zeek::EventHandlerPtr irc_oper_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_oper_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> user, zeek::IntrusivePtr<zeek::StringVal> password);  }  }
extern zeek::EventHandlerPtr irc_kick_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_kick_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> prefix, zeek::IntrusivePtr<zeek::StringVal> chans, zeek::IntrusivePtr<zeek::StringVal> users, zeek::IntrusivePtr<zeek::StringVal> comment);  }  }
extern zeek::EventHandlerPtr irc_error_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_error_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> prefix, zeek::IntrusivePtr<zeek::StringVal> message);  }  }
extern zeek::EventHandlerPtr irc_invite_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_invite_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> prefix, zeek::IntrusivePtr<zeek::StringVal> nickname, zeek::IntrusivePtr<zeek::StringVal> channel);  }  }
extern zeek::EventHandlerPtr irc_mode_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_mode_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> prefix, zeek::IntrusivePtr<zeek::StringVal> params);  }  }
extern zeek::EventHandlerPtr irc_squit_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_squit_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> prefix, zeek::IntrusivePtr<zeek::StringVal> server, zeek::IntrusivePtr<zeek::StringVal> message);  }  }
extern zeek::EventHandlerPtr irc_dcc_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_dcc_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> prefix, zeek::IntrusivePtr<zeek::StringVal> target, zeek::IntrusivePtr<zeek::StringVal> dcc_type, zeek::IntrusivePtr<zeek::StringVal> argument, zeek::IntrusivePtr<zeek::AddrVal> address, zeek_uint_t dest_port, zeek_uint_t size);  }  }
extern zeek::EventHandlerPtr irc_dcc_send_ack; 
namespace zeek { namespace BifEvent {  void enqueue_irc_dcc_send_ack(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t bytes_received);  }  }
extern zeek::EventHandlerPtr irc_user_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_user_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> user, zeek::IntrusivePtr<zeek::StringVal> host, zeek::IntrusivePtr<zeek::StringVal> server, zeek::IntrusivePtr<zeek::StringVal> real_name);  }  }
extern zeek::EventHandlerPtr irc_password_message; 
namespace zeek { namespace BifEvent {  void enqueue_irc_password_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::StringVal> password);  }  }
extern zeek::EventHandlerPtr irc_starttls; 
namespace zeek { namespace BifEvent {  void enqueue_irc_starttls(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }

#endif
