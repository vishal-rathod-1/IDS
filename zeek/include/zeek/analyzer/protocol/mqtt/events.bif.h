// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/analyzer/protocol/mqtt/events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_analyzer_protocol_mqtt_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_analyzer_protocol_mqtt_events_bif
#define _usr_src_packages_BUILD_build_src_analyzer_protocol_mqtt_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr mqtt_connect; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_connect(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg);  }  }
extern zeek::EventHandlerPtr mqtt_connack; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_connack(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg);  }  }
extern zeek::EventHandlerPtr mqtt_publish; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_publish(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t msg_id, zeek::IntrusivePtr<zeek::Val> msg);  }  }
extern zeek::EventHandlerPtr mqtt_puback; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_puback(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t msg_id);  }  }
extern zeek::EventHandlerPtr mqtt_pubrec; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_pubrec(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t msg_id);  }  }
extern zeek::EventHandlerPtr mqtt_pubrel; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_pubrel(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t msg_id);  }  }
extern zeek::EventHandlerPtr mqtt_pubcomp; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_pubcomp(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t msg_id);  }  }
extern zeek::EventHandlerPtr mqtt_subscribe; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_subscribe(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t msg_id, zeek::IntrusivePtr<zeek::Val> topics, zeek::IntrusivePtr<zeek::Val> requested_qos);  }  }
extern zeek::EventHandlerPtr mqtt_suback; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_suback(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t msg_id, zeek_uint_t granted_qos);  }  }
extern zeek::EventHandlerPtr mqtt_unsubscribe; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_unsubscribe(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t msg_id, zeek::IntrusivePtr<zeek::Val> topics);  }  }
extern zeek::EventHandlerPtr mqtt_unsuback; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_unsuback(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t msg_id);  }  }
extern zeek::EventHandlerPtr mqtt_pingreq; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_pingreq(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr mqtt_pingresp; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_pingresp(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr mqtt_disconnect; 
namespace zeek { namespace BifEvent {  void enqueue_mqtt_disconnect(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }

#endif
