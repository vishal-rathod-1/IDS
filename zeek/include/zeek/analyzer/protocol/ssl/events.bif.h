// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/analyzer/protocol/ssl/events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_analyzer_protocol_ssl_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_analyzer_protocol_ssl_events_bif
#define _usr_src_packages_BUILD_build_src_analyzer_protocol_ssl_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr ssl_client_hello; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_client_hello(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t version, zeek_uint_t record_version, double possible_ts, zeek::IntrusivePtr<zeek::StringVal> client_random, zeek::IntrusivePtr<zeek::StringVal> session_id, zeek::IntrusivePtr<zeek::Val> ciphers, zeek::IntrusivePtr<zeek::Val> comp_methods);  }  }
extern zeek::EventHandlerPtr ssl_server_hello; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_server_hello(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t version, zeek_uint_t record_version, double possible_ts, zeek::IntrusivePtr<zeek::StringVal> server_random, zeek::IntrusivePtr<zeek::StringVal> session_id, zeek_uint_t cipher, zeek_uint_t comp_method);  }  }
extern zeek::EventHandlerPtr ssl_extension; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek_uint_t code, zeek::IntrusivePtr<zeek::StringVal> val);  }  }
extern zeek::EventHandlerPtr ssl_extension_elliptic_curves; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_elliptic_curves(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::Val> curves);  }  }
extern zeek::EventHandlerPtr ssl_extension_ec_point_formats; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_ec_point_formats(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::Val> point_formats);  }  }
extern zeek::EventHandlerPtr ssl_extension_signature_algorithm; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_signature_algorithm(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::Val> signature_algorithms);  }  }
extern zeek::EventHandlerPtr ssl_extension_key_share; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_key_share(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::Val> curves);  }  }
extern zeek::EventHandlerPtr ssl_extension_pre_shared_key_client_hello; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_pre_shared_key_client_hello(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::Val> identities, zeek::IntrusivePtr<zeek::Val> binders);  }  }
extern zeek::EventHandlerPtr ssl_extension_pre_shared_key_server_hello; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_pre_shared_key_server_hello(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek_uint_t selected_identity);  }  }
extern zeek::EventHandlerPtr ssl_ecdh_server_params; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_ecdh_server_params(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t curve, zeek::IntrusivePtr<zeek::StringVal> point);  }  }
extern zeek::EventHandlerPtr ssl_dh_server_params; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_dh_server_params(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> p, zeek::IntrusivePtr<zeek::StringVal> q, zeek::IntrusivePtr<zeek::StringVal> Ys);  }  }
extern zeek::EventHandlerPtr ssl_server_signature; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_server_signature(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> signature_and_hashalgorithm, zeek::IntrusivePtr<zeek::StringVal> signature);  }  }
extern zeek::EventHandlerPtr ssl_ecdh_client_params; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_ecdh_client_params(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> point);  }  }
extern zeek::EventHandlerPtr ssl_dh_client_params; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_dh_client_params(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> Yc);  }  }
extern zeek::EventHandlerPtr ssl_rsa_client_pms; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_rsa_client_pms(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> pms);  }  }
extern zeek::EventHandlerPtr ssl_extension_application_layer_protocol_negotiation; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_application_layer_protocol_negotiation(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::Val> protocols);  }  }
extern zeek::EventHandlerPtr ssl_extension_server_name; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_server_name(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::Val> names);  }  }
extern zeek::EventHandlerPtr ssl_extension_signed_certificate_timestamp; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_signed_certificate_timestamp(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek_uint_t version, zeek::IntrusivePtr<zeek::StringVal> logid, zeek_uint_t timestamp, zeek::IntrusivePtr<zeek::Val> signature_and_hashalgorithm, zeek::IntrusivePtr<zeek::StringVal> signature);  }  }
extern zeek::EventHandlerPtr ssl_extension_supported_versions; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_supported_versions(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::Val> versions);  }  }
extern zeek::EventHandlerPtr ssl_extension_psk_key_exchange_modes; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_psk_key_exchange_modes(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::Val> modes);  }  }
extern zeek::EventHandlerPtr ssl_extension_connection_id; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_extension_connection_id(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::StringVal> cid);  }  }
extern zeek::EventHandlerPtr ssl_established; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_established(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr ssl_alert; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_alert(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek_uint_t level, zeek_uint_t desc);  }  }
extern zeek::EventHandlerPtr ssl_session_ticket_handshake; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_session_ticket_handshake(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t ticket_lifetime_hint, zeek::IntrusivePtr<zeek::StringVal> ticket);  }  }
extern zeek::EventHandlerPtr ssl_heartbeat; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_heartbeat(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek_uint_t length, zeek_uint_t heartbeat_type, zeek_uint_t payload_length, zeek::IntrusivePtr<zeek::StringVal> payload);  }  }
extern zeek::EventHandlerPtr ssl_plaintext_data; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_plaintext_data(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek_uint_t record_version, zeek_uint_t content_type, zeek_uint_t length);  }  }
extern zeek::EventHandlerPtr ssl_encrypted_data; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_encrypted_data(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek_uint_t record_version, zeek_uint_t content_type, zeek_uint_t length);  }  }
extern zeek::EventHandlerPtr ssl_probable_encrypted_handshake_message; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_probable_encrypted_handshake_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek_uint_t length);  }  }
extern zeek::EventHandlerPtr ssl_stapled_ocsp; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_stapled_ocsp(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::StringVal> response);  }  }
extern zeek::EventHandlerPtr ssl_handshake_message; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_handshake_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek_uint_t msg_type, zeek_uint_t length);  }  }
extern zeek::EventHandlerPtr ssl_change_cipher_spec; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_change_cipher_spec(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client);  }  }
extern zeek::EventHandlerPtr ssl_connection_flipped; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_connection_flipped(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr ssl_certificate_request; 
namespace zeek { namespace BifEvent {  void enqueue_ssl_certificate_request(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_client, zeek::IntrusivePtr<zeek::Val> certificate_types, zeek::IntrusivePtr<zeek::Val> supported_signature_algorithms, zeek::IntrusivePtr<zeek::Val> certificate_authorities);  }  }

#endif
