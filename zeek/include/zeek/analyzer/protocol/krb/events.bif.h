// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/analyzer/protocol/krb/events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_analyzer_protocol_krb_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_analyzer_protocol_krb_events_bif
#define _usr_src_packages_BUILD_build_src_analyzer_protocol_krb_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr krb_as_request; 
namespace zeek { namespace BifEvent {  void enqueue_krb_as_request(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg);  }  }
extern zeek::EventHandlerPtr krb_as_response; 
namespace zeek { namespace BifEvent {  void enqueue_krb_as_response(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg);  }  }
extern zeek::EventHandlerPtr krb_tgs_request; 
namespace zeek { namespace BifEvent {  void enqueue_krb_tgs_request(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg);  }  }
extern zeek::EventHandlerPtr krb_tgs_response; 
namespace zeek { namespace BifEvent {  void enqueue_krb_tgs_response(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg);  }  }
extern zeek::EventHandlerPtr krb_ap_request; 
namespace zeek { namespace BifEvent {  void enqueue_krb_ap_request(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> ticket, zeek::IntrusivePtr<zeek::Val> opts);  }  }
extern zeek::EventHandlerPtr krb_ap_response; 
namespace zeek { namespace BifEvent {  void enqueue_krb_ap_response(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr krb_priv; 
namespace zeek { namespace BifEvent {  void enqueue_krb_priv(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig);  }  }
extern zeek::EventHandlerPtr krb_safe; 
namespace zeek { namespace BifEvent {  void enqueue_krb_safe(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::Val> msg);  }  }
extern zeek::EventHandlerPtr krb_cred; 
namespace zeek { namespace BifEvent {  void enqueue_krb_cred(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek::IntrusivePtr<zeek::Val> tickets);  }  }
extern zeek::EventHandlerPtr krb_error; 
namespace zeek { namespace BifEvent {  void enqueue_krb_error(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> msg);  }  }

#endif
