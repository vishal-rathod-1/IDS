// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/analyzer/protocol/krb/types.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_analyzer_protocol_krb_types_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_analyzer_protocol_krb_types_bif
#define _usr_src_packages_BUILD_build_src_analyzer_protocol_krb_types_bif
#include "zeek/zeek-bif.h"
#endif
#endif

namespace zeek { namespace BifConst { namespace KRB {  extern zeek::IntrusivePtr<zeek::StringVal> keytab;  }  } }
namespace zeek { namespace BifType { namespace Record{ namespace KRB {  extern zeek::IntrusivePtr<zeek::RecordType> Error_Msg;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace KRB {  extern zeek::IntrusivePtr<zeek::RecordType> SAFE_Msg;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace KRB {  extern zeek::IntrusivePtr<zeek::RecordType> KDC_Options;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace KRB {  extern zeek::IntrusivePtr<zeek::RecordType> AP_Options;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace KRB {  extern zeek::IntrusivePtr<zeek::RecordType> Type_Value;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace KRB {  extern zeek::IntrusivePtr<zeek::RecordType> Ticket;  } } }}
namespace zeek { namespace BifType { namespace Vector{ namespace KRB {  extern zeek::IntrusivePtr<zeek::VectorType> Ticket_Vector;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace KRB {  extern zeek::IntrusivePtr<zeek::RecordType> Host_Address;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace KRB {  extern zeek::IntrusivePtr<zeek::RecordType> KDC_Request;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace KRB {  extern zeek::IntrusivePtr<zeek::RecordType> KDC_Response;  } } }}

#endif
