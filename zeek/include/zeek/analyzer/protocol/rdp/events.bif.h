// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/analyzer/protocol/rdp/events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_analyzer_protocol_rdp_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_analyzer_protocol_rdp_events_bif
#define _usr_src_packages_BUILD_build_src_analyzer_protocol_rdp_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr rdpeudp_syn; 
namespace zeek { namespace BifEvent {  void enqueue_rdpeudp_syn(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr rdpeudp_synack; 
namespace zeek { namespace BifEvent {  void enqueue_rdpeudp_synack(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c);  }  }
extern zeek::EventHandlerPtr rdpeudp_established; 
namespace zeek { namespace BifEvent {  void enqueue_rdpeudp_established(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t version);  }  }
extern zeek::EventHandlerPtr rdpeudp_data; 
namespace zeek { namespace BifEvent {  void enqueue_rdpeudp_data(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int is_orig, zeek_uint_t version, zeek::IntrusivePtr<zeek::StringVal> data);  }  }
extern zeek::EventHandlerPtr rdp_native_encrypted_data; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_native_encrypted_data(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, int orig, zeek_uint_t len);  }  }
extern zeek::EventHandlerPtr rdp_connect_request; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_connect_request(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::StringVal> cookie, zeek_uint_t flags);  }  }
extern zeek::EventHandlerPtr rdp_negotiation_response; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_negotiation_response(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t security_protocol, zeek_uint_t flags);  }  }
extern zeek::EventHandlerPtr rdp_negotiation_failure; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_negotiation_failure(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t failure_code, zeek_uint_t flags);  }  }
extern zeek::EventHandlerPtr rdp_client_core_data; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_client_core_data(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> data);  }  }
extern zeek::EventHandlerPtr rdp_client_security_data; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_client_security_data(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> data);  }  }
extern zeek::EventHandlerPtr rdp_client_network_data; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_client_network_data(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> channels);  }  }
extern zeek::EventHandlerPtr rdp_client_cluster_data; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_client_cluster_data(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> data);  }  }
extern zeek::EventHandlerPtr rdp_gcc_server_create_response; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_gcc_server_create_response(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t result);  }  }
extern zeek::EventHandlerPtr rdp_server_security; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_server_security(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t encryption_method, zeek_uint_t encryption_level);  }  }
extern zeek::EventHandlerPtr rdp_server_certificate; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_server_certificate(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t cert_type, int permanently_issued);  }  }
extern zeek::EventHandlerPtr rdp_begin_encryption; 
namespace zeek { namespace BifEvent {  void enqueue_rdp_begin_encryption(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek_uint_t security_protocol);  }  }

#endif
