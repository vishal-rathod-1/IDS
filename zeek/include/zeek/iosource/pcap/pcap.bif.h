// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/iosource/pcap/pcap.bif (alternative mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_iosource_pcap_pcap_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_iosource_pcap_pcap_bif
#define _usr_src_packages_BUILD_build_src_iosource_pcap_pcap_bif
#include "zeek/zeek-bif.h"
#endif
#endif

namespace zeek { namespace BifConst { namespace Pcap {  extern zeek_uint_t snaplen;  }  } }
namespace zeek { namespace BifConst { namespace Pcap {  extern zeek_uint_t bufsize;  }  } }
namespace zeek { namespace BifConst { namespace Pcap {  extern zeek_uint_t bufsize_offline_bytes;  }  } }
namespace zeek { namespace BifConst { namespace Pcap {  extern double non_fd_timeout;  }  } }
namespace zeek { namespace BifFunc { namespace Pcap { extern zeek::ValPtr precompile_pcap_filter_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Pcap { extern zeek::ValPtr install_pcap_filter_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Pcap { extern zeek::ValPtr error_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Pcap { extern zeek::ValPtr get_filter_state_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Pcap { extern zeek::ValPtr get_filter_state_string_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Pcap { extern zeek::ValPtr findalldevs_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }

#endif
