// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/packet_analysis/protocol/icmp/events.bif (plugin mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_packet_analysis_protocol_icmp_events_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_packet_analysis_protocol_icmp_events_bif
#define _usr_src_packages_BUILD_build_src_packet_analysis_protocol_icmp_events_bif
#include "zeek/zeek-bif.h"
#endif
#endif

extern zeek::EventHandlerPtr icmp_sent; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_sent(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info);  }  }
extern zeek::EventHandlerPtr icmp_sent_payload; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_sent_payload(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::StringVal> payload);  }  }
extern zeek::EventHandlerPtr icmp_echo_request; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_echo_request(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek_uint_t id, zeek_uint_t seq, zeek::IntrusivePtr<zeek::StringVal> payload);  }  }
extern zeek::EventHandlerPtr icmp_echo_reply; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_echo_reply(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek_uint_t id, zeek_uint_t seq, zeek::IntrusivePtr<zeek::StringVal> payload);  }  }
extern zeek::EventHandlerPtr icmp_error_message; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_error_message(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek_uint_t code, zeek::IntrusivePtr<zeek::Val> context);  }  }
extern zeek::EventHandlerPtr icmp_unreachable; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_unreachable(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek_uint_t code, zeek::IntrusivePtr<zeek::Val> context);  }  }
extern zeek::EventHandlerPtr icmp_packet_too_big; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_packet_too_big(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek_uint_t code, zeek::IntrusivePtr<zeek::Val> context);  }  }
extern zeek::EventHandlerPtr icmp_time_exceeded; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_time_exceeded(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek_uint_t code, zeek::IntrusivePtr<zeek::Val> context);  }  }
extern zeek::EventHandlerPtr icmp_parameter_problem; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_parameter_problem(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek_uint_t code, zeek::IntrusivePtr<zeek::Val> context);  }  }
extern zeek::EventHandlerPtr icmp_router_solicitation; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_router_solicitation(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::Val> options);  }  }
extern zeek::EventHandlerPtr icmp_router_advertisement; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_router_advertisement(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek_uint_t cur_hop_limit, int managed, int other, int home_agent, zeek_uint_t pref, int proxy, zeek_uint_t rsv, double router_lifetime, double reachable_time, double retrans_timer, zeek::IntrusivePtr<zeek::Val> options);  }  }
extern zeek::EventHandlerPtr icmp_neighbor_solicitation; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_neighbor_solicitation(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::AddrVal> tgt, zeek::IntrusivePtr<zeek::Val> options);  }  }
extern zeek::EventHandlerPtr icmp_neighbor_advertisement; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_neighbor_advertisement(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, int router, int solicited, int override, zeek::IntrusivePtr<zeek::AddrVal> tgt, zeek::IntrusivePtr<zeek::Val> options);  }  }
extern zeek::EventHandlerPtr icmp_redirect; 
namespace zeek { namespace BifEvent {  void enqueue_icmp_redirect(zeek::analyzer::Analyzer* analyzer, zeek::Connection* c, zeek::IntrusivePtr<zeek::Val> info, zeek::IntrusivePtr<zeek::AddrVal> tgt, zeek::IntrusivePtr<zeek::AddrVal> dest, zeek::IntrusivePtr<zeek::Val> options);  }  }

#endif
