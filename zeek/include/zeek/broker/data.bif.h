// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/broker/data.bif (alternative mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_broker_data_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_broker_data_bif
#define _usr_src_packages_BUILD_build_src_broker_data_bif
#include "zeek/zeek-bif.h"
#endif
#endif

namespace BifEnum { namespace Broker { enum DataType {
	NONE,
	BOOL,
	INT,
	COUNT,
	DOUBLE,
	STRING,
	ADDR,
	SUBNET,
	PORT,
	TIME,
	INTERVAL,
	ENUM,
	SET,
	TABLE,
	VECTOR,
}; } }
namespace zeek { namespace BifType { namespace Enum{ namespace Broker {  extern zeek::IntrusivePtr<zeek::EnumType> DataType;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace Broker {  extern zeek::IntrusivePtr<zeek::RecordType> Data;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace Broker {  extern zeek::IntrusivePtr<zeek::RecordType> TableItem;  } } }}
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __data_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __data_type_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __opaque_clone_through_serialization_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __set_create_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __set_clear_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __set_size_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __set_contains_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __set_insert_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __set_remove_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __set_iterator_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __set_iterator_last_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __set_iterator_next_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __set_iterator_value_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __table_create_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __table_clear_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __table_size_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __table_contains_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __table_insert_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __table_remove_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __table_lookup_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __table_iterator_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __table_iterator_last_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __table_iterator_next_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __table_iterator_value_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __vector_create_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __vector_clear_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __vector_size_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __vector_insert_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __vector_replace_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __vector_remove_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __vector_lookup_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __vector_iterator_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __vector_iterator_last_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __vector_iterator_next_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __vector_iterator_value_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __record_create_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __record_size_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __record_assign_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __record_lookup_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __record_iterator_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __record_iterator_last_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __record_iterator_next_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __record_iterator_value_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }

#endif
