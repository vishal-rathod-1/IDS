// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/broker/comm.bif (alternative mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_broker_comm_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_broker_comm_bif
#define _usr_src_packages_BUILD_build_src_broker_comm_bif
#include "zeek/zeek-bif.h"
#endif
#endif

namespace Broker { extern zeek::EventHandlerPtr peer_added;  }
namespace zeek { namespace BifEvent { namespace Broker {  void enqueue_peer_added(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> endpoint, zeek::IntrusivePtr<zeek::StringVal> msg);  }  }  }
namespace Broker { extern zeek::EventHandlerPtr peer_removed;  }
namespace zeek { namespace BifEvent { namespace Broker {  void enqueue_peer_removed(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> endpoint, zeek::IntrusivePtr<zeek::StringVal> msg);  }  }  }
namespace Broker { extern zeek::EventHandlerPtr peer_lost;  }
namespace zeek { namespace BifEvent { namespace Broker {  void enqueue_peer_lost(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> endpoint, zeek::IntrusivePtr<zeek::StringVal> msg);  }  }  }
namespace Broker { extern zeek::EventHandlerPtr endpoint_discovered;  }
namespace zeek { namespace BifEvent { namespace Broker {  void enqueue_endpoint_discovered(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> endpoint, zeek::IntrusivePtr<zeek::StringVal> msg);  }  }  }
namespace Broker { extern zeek::EventHandlerPtr endpoint_unreachable;  }
namespace zeek { namespace BifEvent { namespace Broker {  void enqueue_endpoint_unreachable(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> endpoint, zeek::IntrusivePtr<zeek::StringVal> msg);  }  }  }
namespace Broker { extern zeek::EventHandlerPtr status;  }
namespace zeek { namespace BifEvent { namespace Broker {  void enqueue_status(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> endpoint, zeek::IntrusivePtr<zeek::StringVal> msg);  }  }  }
namespace Broker { extern zeek::EventHandlerPtr error;  }
namespace zeek { namespace BifEvent { namespace Broker {  void enqueue_error(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> code, zeek::IntrusivePtr<zeek::StringVal> msg);  }  }  }
namespace BifEnum { namespace Broker { enum ErrorCode {
	NO_ERROR = 0,
	UNSPECIFIED = 1,
	PEER_INCOMPATIBLE = 2,
	PEER_INVALID = 3,
	PEER_UNAVAILABLE = 4,
	PEER_DISCONNECT_DURING_HANDSHAKE = 5,
	PEER_TIMEOUT = 6,
	MASTER_EXISTS = 7,
	NO_SUCH_MASTER = 8,
	NO_SUCH_KEY = 9,
	REQUEST_TIMEOUT = 10,
	TYPE_CLASH = 11,
	INVALID_DATA = 12,
	BACKEND_FAILURE = 13,
	STALE_DATA = 14,
	CANNOT_OPEN_FILE = 15,
	CANNOT_WRITE_FILE = 16,
	INVALID_TOPIC_KEY = 17,
	END_OF_FILE = 18,
	INVALID_TAG = 19,
	INVALID_STATUS = 20,
	CAF_ERROR = 100,
}; } }
namespace zeek { namespace BifType { namespace Enum{ namespace Broker {  extern zeek::IntrusivePtr<zeek::EnumType> ErrorCode;  } } }}
namespace BifEnum { namespace Broker { enum PeerStatus {
	INITIALIZING,
	CONNECTING,
	CONNECTED,
	PEERED,
	DISCONNECTED,
	RECONNECTING,
}; } }
namespace zeek { namespace BifType { namespace Enum{ namespace Broker {  extern zeek::IntrusivePtr<zeek::EnumType> PeerStatus;  } } }}
namespace BifEnum { namespace Broker { enum BrokerProtocol {
	NATIVE,
	WEBSOCKET,
}; } }
namespace zeek { namespace BifType { namespace Enum{ namespace Broker {  extern zeek::IntrusivePtr<zeek::EnumType> BrokerProtocol;  } } }}
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __listen_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __peer_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __peer_no_retry_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __unpeer_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __peers_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __node_id_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }

#endif
