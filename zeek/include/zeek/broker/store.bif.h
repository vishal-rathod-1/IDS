// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/broker/store.bif (alternative mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_broker_store_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_broker_store_bif
#define _usr_src_packages_BUILD_build_src_broker_store_bif
#include "zeek/zeek-bif.h"
#endif
#endif

namespace zeek { namespace BifType { namespace Record{ namespace Broker {  extern zeek::IntrusivePtr<zeek::RecordType> QueryResult;  } } }}
namespace zeek { namespace BifType { namespace Record{ namespace Broker {  extern zeek::IntrusivePtr<zeek::RecordType> BackendOptions;  } } }}
namespace BifEnum { namespace Broker { enum BackendType {
	MEMORY,
	SQLITE,
}; } }
namespace zeek { namespace BifType { namespace Enum{ namespace Broker {  extern zeek::IntrusivePtr<zeek::EnumType> BackendType;  } } }}
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __create_master_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __create_clone_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __is_closed_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __close_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __store_name_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __exists_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __get_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __put_unique_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __get_index_from_value_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __keys_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __put_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __erase_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __increment_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __decrement_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __append_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __insert_into_set_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __insert_into_table_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __remove_from_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __push_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __pop_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifFunc { namespace Broker { extern zeek::ValPtr __clear_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }

#endif
