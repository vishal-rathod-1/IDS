// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/probabilistic/bloom-filter.bif (alternative mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_probabilistic_bloom_filter_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_probabilistic_bloom_filter_bif
#define _usr_src_packages_BUILD_build_src_probabilistic_bloom_filter_bif
#include "zeek/zeek-bif.h"
#endif
#endif

namespace zeek { namespace BifFunc { extern zeek::ValPtr bloomfilter_basic_init_bif(zeek::detail::Frame* frame, const zeek::Args*); }  }
namespace zeek { namespace BifFunc { extern zeek::ValPtr bloomfilter_basic_init2_bif(zeek::detail::Frame* frame, const zeek::Args*); }  }
namespace zeek { namespace BifFunc { extern zeek::ValPtr bloomfilter_counting_init_bif(zeek::detail::Frame* frame, const zeek::Args*); }  }
namespace zeek { namespace BifFunc { extern zeek::ValPtr bloomfilter_add_bif(zeek::detail::Frame* frame, const zeek::Args*); }  }
namespace zeek { namespace BifFunc { extern zeek::ValPtr bloomfilter_decrement_bif(zeek::detail::Frame* frame, const zeek::Args*); }  }
namespace zeek { namespace BifFunc { extern zeek::ValPtr bloomfilter_lookup_bif(zeek::detail::Frame* frame, const zeek::Args*); }  }
namespace zeek { namespace BifFunc { extern zeek::ValPtr bloomfilter_clear_bif(zeek::detail::Frame* frame, const zeek::Args*); }  }
namespace zeek { namespace BifFunc { extern zeek::ValPtr bloomfilter_merge_bif(zeek::detail::Frame* frame, const zeek::Args*); }  }
namespace zeek { namespace BifFunc { extern zeek::ValPtr bloomfilter_intersect_bif(zeek::detail::Frame* frame, const zeek::Args*); }  }
namespace zeek { namespace BifFunc { extern zeek::ValPtr bloomfilter_internal_state_bif(zeek::detail::Frame* frame, const zeek::Args*); }  }

#endif
