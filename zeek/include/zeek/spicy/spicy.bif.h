// This file was automatically generated by bifcl from /usr/src/packages/BUILD/src/spicy/spicy.bif (alternative mode).

#if defined(ZEEK_IN_NETVAR) || ! defined(_usr_src_packages_BUILD_build_src_spicy_spicy_bif)
#ifndef ZEEK_IN_NETVAR
#ifndef _usr_src_packages_BUILD_build_src_spicy_spicy_bif
#define _usr_src_packages_BUILD_build_src_spicy_spicy_bif
#include "zeek/zeek-bif.h"
#endif
#endif

namespace zeek { namespace BifConst { namespace Spicy {  extern int available;  }  } }
namespace zeek { namespace BifConst { namespace Spicy {  extern int enable_print;  }  } }
namespace zeek { namespace BifConst { namespace Spicy {  extern int enable_profiling;  }  } }
namespace zeek { namespace BifConst { namespace Spicy {  extern int abort_on_exceptions;  }  } }
namespace zeek { namespace BifConst { namespace Spicy {  extern int show_backtraces;  }  } }
namespace zeek { namespace BifConst { namespace Spicy {  extern zeek_uint_t max_file_depth;  }  } }
namespace Spicy { extern zeek::EventHandlerPtr max_file_depth_exceeded;  }
namespace zeek { namespace BifEvent { namespace Spicy {  void enqueue_max_file_depth_exceeded(zeek::analyzer::Analyzer* analyzer, zeek::IntrusivePtr<zeek::Val> f, zeek::IntrusivePtr<zeek::Val> args, zeek_uint_t limit);  }  }  }
namespace zeek { namespace BifFunc { namespace Spicy { extern zeek::ValPtr __toggle_analyzer_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }
namespace zeek { namespace BifType { namespace Record{ namespace Spicy {  extern zeek::IntrusivePtr<zeek::RecordType> ResourceUsage;  } } }}
namespace zeek { namespace BifFunc { namespace Spicy { extern zeek::ValPtr __resource_usage_bif(zeek::detail::Frame* frame, const zeek::Args*); }  } }

#endif
